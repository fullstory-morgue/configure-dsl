#!/bin/bash

# we need gettext (is loaded in ssft.sh or cloned...)
if [ -f /usr/bin/gettext.sh ]; then
	. /usr/bin/gettext.sh || exit 1
else
	exit 1
fi
#---------------------------------------------------------------------
# we need root rights
#---------------------------------------------------------------------
SU_ME=$(type -p su-me)  || SU_ME="/usr/bin/su-me"
if [ "$UID" -ne 0 ]; then
	[ -x "$SU_ME" ] && exec "$SU_ME" "$0" "$@"

	printf "$(gettext "Error: You must be root to run this script!")\n"
	exit 1
fi

TEXTDOMAIN="my-pppconf"
export TEXTDOMAIN
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


SSFTSH="$(which ssft.sh)"			|| SSFTSH="/usr/bin/ssft.sh"
# initialize ssft
. "$SSFTSH"
[ -n "$SSFT_FRONTEND" ] ||  SSFT_FRONTEND="$(ssft_choose_frontend)"


function inputbox {
	# inputbox title text width [init]
	SSFT_DEFAULT="$3"
	ssft_read_string "$1" "$2"
	unset SSFT_DEFAULT
	[ -n "$SSFT_RESULT" ] && printf "$SSFT_RESULT\n"
}

function msgbox {
	# msgbox title text width
	ssft_display_message "$1" "$2"
}

function yesno {
	# yesno title text width
	# yesno title text width
	ssft_yesno "$1" "$2" && printf "0\n" || printf "1\n"
}


TITLE="$(gettext "PPP Configuration for Modem")"
PROVIDER="$(inputbox "$TITLE" "$(gettext "Provider")" provider)"
if [ "$PROVIDER" = "" ]; then
	msgbox "$TITLE" "$(gettext "Error: bad provider name")"
	exit 10
fi

NUMBER="$(inputbox "$TITLE" "$(gettext "Number")")"
if [ "$NUMBER" = "" ]; then
	msgbox "$TITLE" "$(gettext "Error: bad number")"
	exit 20
fi

USERNAME="$(inputbox "$TITLE" "$(gettext "Username")")"
if [ "$USERNAME" = "" ]; then
	msgbox "$TITLE" "$(gettext "Error: bad username")"
	exit 30
fi

PASSWORD="$(inputbox "$TITLE" "$(gettext "Password")")"
if [ "$PASSWORD" = "" ]; then
	msgbox "$TITLE" "$(gettext "Error: bad password")"
	exit 40
fi

DEVICE="$(inputbox "$TITLE" "$(gettext "Device")" "/dev/ttyS0")"
if [ "$DEVICE" = "" ]; then
	msgbox "$TITLE" "$(gettext "Error: bad device")"
	exit 50
fi

rm -rf "/etc/ppp/peers/$PROVIDER"
cat <<EOF >"/etc/ppp/peers/$PROVIDER"
# This optionfile was generated by pppconfig 2.1.
#
#
hide-password
noauth
connect "/usr/sbin/chat -v -f /etc/chatscripts/$PROVIDER"
debug
$DEVICE
115200
defaultroute
noipdefault
user "$USERNAME"
remotename "$PROVIDER"
ipparam "$PROVIDER"

usepeerdns
EOF
chmod 640 "/etc/ppp/peers/$PROVIDER"
chown root.dip "/etc/ppp/peers/$PROVIDER"
rm -rf "/etc/chatscripts/$PROVIDER"
mkdir -p /etc/chatscripts
cat <<EOF >"/etc/chatscripts/$PROVIDER"
# This chatfile was generated by pppconfig 2.1.
# Please do not delete any of the comments.  Pppconfig needs them.
#
# ispauth PAP
# abortstring
ABORT BUSY ABORT 'NO CARRIER' ABORT VOICE ABORT 'NO DIALTONE' ABORT 'NO DIAL TONE' ABORT 'NO ANSWER' ABORT DELAYED
# modeminit
'' ATZ
# ispnumber
OK-AT-OK ATDT$NUMBER
# ispconnect
CONNECT \d\c
# prelogin

# ispname
# isppassword
# postlogin

# end of pppconfig stuff
EOF

chmod 640 "/etc/chatscripts/$PROVIDER"
chown root:dip "/etc/chatscripts/$PROVIDER"

for AUTH in chap pap; do
	[ -w /etc/ppp/$AUTH-secrets ] && perl -pi -e "s|^[\s]*\"$USERNAME\".*[\n]?$||" /etc/ppp/$AUTH-secrets
	cat <<EOF >>/etc/ppp/$AUTH-secrets
"$USERNAME" * "$PASSWORD"
EOF

	chmod 600 /etc/ppp/$AUTH-secrets
	chown root:root /etc/ppp/$AUTH-secrets
done

PPPD=/usr/sbin/pppd
if [ ! -e /etc/debian_version ]; then
	[ -f /etc/resolv.conf ] && cp /etc/resolv.conf /etc/resolv.conf.1st
	rm -f /etc/resolv.conf
	ln -s ppp/resolv.conf /etc/resolv.conf
fi

CONNECT=$(yesno "$TITLE" "$(gettext "Connect now?")")
[ "$CONNECT" = "1" ] && exit 50

killall pppd 2>/dev/null

"$PPPD" call "$PROVIDER"

